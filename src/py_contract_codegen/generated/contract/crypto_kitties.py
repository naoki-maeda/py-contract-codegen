# Autogenerated file.
from typing import Any, Iterable
from hexbytes import HexBytes
from web3 import Web3
from web3.contract.contract import ContractFunction
from web3.types import ENS, Address, BlockIdentifier, ChecksumAddress, EventData

ABI = [
    {
        "constant": True,
        "inputs": [{"name": "_interfaceID", "type": "bytes4"}],
        "name": "supportsInterface",
        "outputs": [{"name": "", "type": "bool"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [],
        "name": "cfoAddress",
        "outputs": [{"name": "", "type": "address"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [
            {"name": "_tokenId", "type": "uint256"},
            {"name": "_preferredTransport", "type": "string"},
        ],
        "name": "tokenMetadata",
        "outputs": [{"name": "infoUrl", "type": "string"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [],
        "name": "promoCreatedCount",
        "outputs": [{"name": "", "type": "uint256"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [],
        "name": "name",
        "outputs": [{"name": "", "type": "string"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": False,
        "inputs": [
            {"name": "_to", "type": "address"},
            {"name": "_tokenId", "type": "uint256"},
        ],
        "name": "approve",
        "outputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [],
        "name": "ceoAddress",
        "outputs": [{"name": "", "type": "address"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [],
        "name": "GEN0_STARTING_PRICE",
        "outputs": [{"name": "", "type": "uint256"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": False,
        "inputs": [{"name": "_address", "type": "address"}],
        "name": "setSiringAuctionAddress",
        "outputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [],
        "name": "totalSupply",
        "outputs": [{"name": "", "type": "uint256"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [],
        "name": "pregnantKitties",
        "outputs": [{"name": "", "type": "uint256"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [{"name": "_kittyId", "type": "uint256"}],
        "name": "isPregnant",
        "outputs": [{"name": "", "type": "bool"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [],
        "name": "GEN0_AUCTION_DURATION",
        "outputs": [{"name": "", "type": "uint256"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [],
        "name": "siringAuction",
        "outputs": [{"name": "", "type": "address"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": False,
        "inputs": [
            {"name": "_from", "type": "address"},
            {"name": "_to", "type": "address"},
            {"name": "_tokenId", "type": "uint256"},
        ],
        "name": "transferFrom",
        "outputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function",
    },
    {
        "constant": False,
        "inputs": [{"name": "_address", "type": "address"}],
        "name": "setGeneScienceAddress",
        "outputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function",
    },
    {
        "constant": False,
        "inputs": [{"name": "_newCEO", "type": "address"}],
        "name": "setCEO",
        "outputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function",
    },
    {
        "constant": False,
        "inputs": [{"name": "_newCOO", "type": "address"}],
        "name": "setCOO",
        "outputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function",
    },
    {
        "constant": False,
        "inputs": [
            {"name": "_kittyId", "type": "uint256"},
            {"name": "_startingPrice", "type": "uint256"},
            {"name": "_endingPrice", "type": "uint256"},
            {"name": "_duration", "type": "uint256"},
        ],
        "name": "createSaleAuction",
        "outputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function",
    },
    {
        "constant": False,
        "inputs": [],
        "name": "unpause",
        "outputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [{"name": "", "type": "uint256"}],
        "name": "sireAllowedToAddress",
        "outputs": [{"name": "", "type": "address"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [
            {"name": "_matronId", "type": "uint256"},
            {"name": "_sireId", "type": "uint256"},
        ],
        "name": "canBreedWith",
        "outputs": [{"name": "", "type": "bool"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [{"name": "", "type": "uint256"}],
        "name": "kittyIndexToApproved",
        "outputs": [{"name": "", "type": "address"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": False,
        "inputs": [
            {"name": "_kittyId", "type": "uint256"},
            {"name": "_startingPrice", "type": "uint256"},
            {"name": "_endingPrice", "type": "uint256"},
            {"name": "_duration", "type": "uint256"},
        ],
        "name": "createSiringAuction",
        "outputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function",
    },
    {
        "constant": False,
        "inputs": [{"name": "val", "type": "uint256"}],
        "name": "setAutoBirthFee",
        "outputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function",
    },
    {
        "constant": False,
        "inputs": [
            {"name": "_addr", "type": "address"},
            {"name": "_sireId", "type": "uint256"},
        ],
        "name": "approveSiring",
        "outputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function",
    },
    {
        "constant": False,
        "inputs": [{"name": "_newCFO", "type": "address"}],
        "name": "setCFO",
        "outputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function",
    },
    {
        "constant": False,
        "inputs": [
            {"name": "_genes", "type": "uint256"},
            {"name": "_owner", "type": "address"},
        ],
        "name": "createPromoKitty",
        "outputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function",
    },
    {
        "constant": False,
        "inputs": [{"name": "secs", "type": "uint256"}],
        "name": "setSecondsPerBlock",
        "outputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [],
        "name": "paused",
        "outputs": [{"name": "", "type": "bool"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": False,
        "inputs": [],
        "name": "withdrawBalance",
        "outputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [{"name": "_tokenId", "type": "uint256"}],
        "name": "ownerOf",
        "outputs": [{"name": "owner", "type": "address"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [],
        "name": "GEN0_CREATION_LIMIT",
        "outputs": [{"name": "", "type": "uint256"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [],
        "name": "newContractAddress",
        "outputs": [{"name": "", "type": "address"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": False,
        "inputs": [{"name": "_address", "type": "address"}],
        "name": "setSaleAuctionAddress",
        "outputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [{"name": "_owner", "type": "address"}],
        "name": "balanceOf",
        "outputs": [{"name": "count", "type": "uint256"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": False,
        "inputs": [{"name": "_v2Address", "type": "address"}],
        "name": "setNewAddress",
        "outputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [],
        "name": "secondsPerBlock",
        "outputs": [{"name": "", "type": "uint256"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": False,
        "inputs": [],
        "name": "pause",
        "outputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [{"name": "_owner", "type": "address"}],
        "name": "tokensOfOwner",
        "outputs": [{"name": "ownerTokens", "type": "uint256[]"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": False,
        "inputs": [{"name": "_matronId", "type": "uint256"}],
        "name": "giveBirth",
        "outputs": [{"name": "", "type": "uint256"}],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function",
    },
    {
        "constant": False,
        "inputs": [],
        "name": "withdrawAuctionBalances",
        "outputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [],
        "name": "symbol",
        "outputs": [{"name": "", "type": "string"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [{"name": "", "type": "uint256"}],
        "name": "cooldowns",
        "outputs": [{"name": "", "type": "uint32"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [{"name": "", "type": "uint256"}],
        "name": "kittyIndexToOwner",
        "outputs": [{"name": "", "type": "address"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": False,
        "inputs": [
            {"name": "_to", "type": "address"},
            {"name": "_tokenId", "type": "uint256"},
        ],
        "name": "transfer",
        "outputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [],
        "name": "cooAddress",
        "outputs": [{"name": "", "type": "address"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [],
        "name": "autoBirthFee",
        "outputs": [{"name": "", "type": "uint256"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [],
        "name": "erc721Metadata",
        "outputs": [{"name": "", "type": "address"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": False,
        "inputs": [{"name": "_genes", "type": "uint256"}],
        "name": "createGen0Auction",
        "outputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [{"name": "_kittyId", "type": "uint256"}],
        "name": "isReadyToBreed",
        "outputs": [{"name": "", "type": "bool"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [],
        "name": "PROMO_CREATION_LIMIT",
        "outputs": [{"name": "", "type": "uint256"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": False,
        "inputs": [{"name": "_contractAddress", "type": "address"}],
        "name": "setMetadataAddress",
        "outputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [],
        "name": "saleAuction",
        "outputs": [{"name": "", "type": "address"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [{"name": "_id", "type": "uint256"}],
        "name": "getKitty",
        "outputs": [
            {"name": "isGestating", "type": "bool"},
            {"name": "isReady", "type": "bool"},
            {"name": "cooldownIndex", "type": "uint256"},
            {"name": "nextActionAt", "type": "uint256"},
            {"name": "siringWithId", "type": "uint256"},
            {"name": "birthTime", "type": "uint256"},
            {"name": "matronId", "type": "uint256"},
            {"name": "sireId", "type": "uint256"},
            {"name": "generation", "type": "uint256"},
            {"name": "genes", "type": "uint256"},
        ],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": False,
        "inputs": [
            {"name": "_sireId", "type": "uint256"},
            {"name": "_matronId", "type": "uint256"},
        ],
        "name": "bidOnSiringAuction",
        "outputs": [],
        "payable": True,
        "stateMutability": "payable",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [],
        "name": "gen0CreatedCount",
        "outputs": [{"name": "", "type": "uint256"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [],
        "name": "geneScience",
        "outputs": [{"name": "", "type": "address"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": False,
        "inputs": [
            {"name": "_matronId", "type": "uint256"},
            {"name": "_sireId", "type": "uint256"},
        ],
        "name": "breedWithAuto",
        "outputs": [],
        "payable": True,
        "stateMutability": "payable",
        "type": "function",
    },
    {
        "inputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "constructor",
    },
    {"payable": True, "stateMutability": "payable", "type": "fallback"},
    {
        "anonymous": False,
        "inputs": [
            {"indexed": False, "name": "owner", "type": "address"},
            {"indexed": False, "name": "matronId", "type": "uint256"},
            {"indexed": False, "name": "sireId", "type": "uint256"},
            {"indexed": False, "name": "cooldownEndBlock", "type": "uint256"},
        ],
        "name": "Pregnant",
        "type": "event",
    },
    {
        "anonymous": False,
        "inputs": [
            {"indexed": False, "name": "from", "type": "address"},
            {"indexed": False, "name": "to", "type": "address"},
            {"indexed": False, "name": "tokenId", "type": "uint256"},
        ],
        "name": "Transfer",
        "type": "event",
    },
    {
        "anonymous": False,
        "inputs": [
            {"indexed": False, "name": "owner", "type": "address"},
            {"indexed": False, "name": "approved", "type": "address"},
            {"indexed": False, "name": "tokenId", "type": "uint256"},
        ],
        "name": "Approval",
        "type": "event",
    },
    {
        "anonymous": False,
        "inputs": [
            {"indexed": False, "name": "owner", "type": "address"},
            {"indexed": False, "name": "kittyId", "type": "uint256"},
            {"indexed": False, "name": "matronId", "type": "uint256"},
            {"indexed": False, "name": "sireId", "type": "uint256"},
            {"indexed": False, "name": "genes", "type": "uint256"},
        ],
        "name": "Birth",
        "type": "event",
    },
    {
        "anonymous": False,
        "inputs": [{"indexed": False, "name": "newContract", "type": "address"}],
        "name": "ContractUpgrade",
        "type": "event",
    },
]


class CryptoKittiesContract:
    def __init__(
        self, contract_address: Address | ChecksumAddress | ENS, web3: Web3
    ) -> None:
        self.contract_address = contract_address
        self.web3 = web3
        self.contract = web3.eth.contract(address=self.contract_address, abi=ABI)

    def supportsInterface(self, _interfaceID: bytes) -> bool:
        return self.contract.functions.supportsInterface(_interfaceID).call()

    def cfoAddress(self) -> str:
        return self.contract.functions.cfoAddress().call()

    def tokenMetadata(self, _tokenId: int, _preferredTransport: str) -> str:
        return self.contract.functions.tokenMetadata(
            _tokenId, _preferredTransport
        ).call()

    def promoCreatedCount(self) -> int:
        return self.contract.functions.promoCreatedCount().call()

    def name(self) -> str:
        return self.contract.functions.name().call()

    def approve(self, _to: ChecksumAddress, _tokenId: int) -> ContractFunction:
        return self.contract.functions.approve(_to, _tokenId)

    def ceoAddress(self) -> str:
        return self.contract.functions.ceoAddress().call()

    def GEN0_STARTING_PRICE(self) -> int:
        return self.contract.functions.GEN0_STARTING_PRICE().call()

    def setSiringAuctionAddress(self, _address: ChecksumAddress) -> ContractFunction:
        return self.contract.functions.setSiringAuctionAddress(_address)

    def totalSupply(self) -> int:
        return self.contract.functions.totalSupply().call()

    def pregnantKitties(self) -> int:
        return self.contract.functions.pregnantKitties().call()

    def isPregnant(self, _kittyId: int) -> bool:
        return self.contract.functions.isPregnant(_kittyId).call()

    def GEN0_AUCTION_DURATION(self) -> int:
        return self.contract.functions.GEN0_AUCTION_DURATION().call()

    def siringAuction(self) -> str:
        return self.contract.functions.siringAuction().call()

    def transferFrom(
        self, _from: ChecksumAddress, _to: ChecksumAddress, _tokenId: int
    ) -> ContractFunction:
        return self.contract.functions.transferFrom(_from, _to, _tokenId)

    def setGeneScienceAddress(self, _address: ChecksumAddress) -> ContractFunction:
        return self.contract.functions.setGeneScienceAddress(_address)

    def setCEO(self, _newCEO: ChecksumAddress) -> ContractFunction:
        return self.contract.functions.setCEO(_newCEO)

    def setCOO(self, _newCOO: ChecksumAddress) -> ContractFunction:
        return self.contract.functions.setCOO(_newCOO)

    def createSaleAuction(
        self, _kittyId: int, _startingPrice: int, _endingPrice: int, _duration: int
    ) -> ContractFunction:
        return self.contract.functions.createSaleAuction(
            _kittyId, _startingPrice, _endingPrice, _duration
        )

    def unpause(self) -> ContractFunction:
        return self.contract.functions.unpause()

    def sireAllowedToAddress(self, input_1: int) -> str:
        return self.contract.functions.sireAllowedToAddress(input_1).call()

    def canBreedWith(self, _matronId: int, _sireId: int) -> bool:
        return self.contract.functions.canBreedWith(_matronId, _sireId).call()

    def kittyIndexToApproved(self, input_1: int) -> str:
        return self.contract.functions.kittyIndexToApproved(input_1).call()

    def createSiringAuction(
        self, _kittyId: int, _startingPrice: int, _endingPrice: int, _duration: int
    ) -> ContractFunction:
        return self.contract.functions.createSiringAuction(
            _kittyId, _startingPrice, _endingPrice, _duration
        )

    def setAutoBirthFee(self, val: int) -> ContractFunction:
        return self.contract.functions.setAutoBirthFee(val)

    def approveSiring(self, _addr: ChecksumAddress, _sireId: int) -> ContractFunction:
        return self.contract.functions.approveSiring(_addr, _sireId)

    def setCFO(self, _newCFO: ChecksumAddress) -> ContractFunction:
        return self.contract.functions.setCFO(_newCFO)

    def createPromoKitty(
        self, _genes: int, _owner: ChecksumAddress
    ) -> ContractFunction:
        return self.contract.functions.createPromoKitty(_genes, _owner)

    def setSecondsPerBlock(self, secs: int) -> ContractFunction:
        return self.contract.functions.setSecondsPerBlock(secs)

    def paused(self) -> bool:
        return self.contract.functions.paused().call()

    def withdrawBalance(self) -> ContractFunction:
        return self.contract.functions.withdrawBalance()

    def ownerOf(self, _tokenId: int) -> str:
        return self.contract.functions.ownerOf(_tokenId).call()

    def GEN0_CREATION_LIMIT(self) -> int:
        return self.contract.functions.GEN0_CREATION_LIMIT().call()

    def newContractAddress(self) -> str:
        return self.contract.functions.newContractAddress().call()

    def setSaleAuctionAddress(self, _address: ChecksumAddress) -> ContractFunction:
        return self.contract.functions.setSaleAuctionAddress(_address)

    def balanceOf(self, _owner: ChecksumAddress) -> int:
        return self.contract.functions.balanceOf(_owner).call()

    def setNewAddress(self, _v2Address: ChecksumAddress) -> ContractFunction:
        return self.contract.functions.setNewAddress(_v2Address)

    def secondsPerBlock(self) -> int:
        return self.contract.functions.secondsPerBlock().call()

    def pause(self) -> ContractFunction:
        return self.contract.functions.pause()

    def tokensOfOwner(self, _owner: ChecksumAddress) -> list[int]:
        return self.contract.functions.tokensOfOwner(_owner).call()

    def giveBirth(self, _matronId: int) -> ContractFunction:
        return self.contract.functions.giveBirth(_matronId)

    def withdrawAuctionBalances(self) -> ContractFunction:
        return self.contract.functions.withdrawAuctionBalances()

    def symbol(self) -> str:
        return self.contract.functions.symbol().call()

    def cooldowns(self, input_1: int) -> int:
        return self.contract.functions.cooldowns(input_1).call()

    def kittyIndexToOwner(self, input_1: int) -> str:
        return self.contract.functions.kittyIndexToOwner(input_1).call()

    def transfer(self, _to: ChecksumAddress, _tokenId: int) -> ContractFunction:
        return self.contract.functions.transfer(_to, _tokenId)

    def cooAddress(self) -> str:
        return self.contract.functions.cooAddress().call()

    def autoBirthFee(self) -> int:
        return self.contract.functions.autoBirthFee().call()

    def erc721Metadata(self) -> str:
        return self.contract.functions.erc721Metadata().call()

    def createGen0Auction(self, _genes: int) -> ContractFunction:
        return self.contract.functions.createGen0Auction(_genes)

    def isReadyToBreed(self, _kittyId: int) -> bool:
        return self.contract.functions.isReadyToBreed(_kittyId).call()

    def PROMO_CREATION_LIMIT(self) -> int:
        return self.contract.functions.PROMO_CREATION_LIMIT().call()

    def setMetadataAddress(self, _contractAddress: ChecksumAddress) -> ContractFunction:
        return self.contract.functions.setMetadataAddress(_contractAddress)

    def saleAuction(self) -> str:
        return self.contract.functions.saleAuction().call()

    def getKitty(
        self, _id: int
    ) -> tuple[bool, bool, int, int, int, int, int, int, int, int]:
        return self.contract.functions.getKitty(_id).call()

    def bidOnSiringAuction(self, _sireId: int, _matronId: int) -> ContractFunction:
        return self.contract.functions.bidOnSiringAuction(_sireId, _matronId)

    def gen0CreatedCount(self) -> int:
        return self.contract.functions.gen0CreatedCount().call()

    def geneScience(self) -> str:
        return self.contract.functions.geneScience().call()

    def breedWithAuto(self, _matronId: int, _sireId: int) -> ContractFunction:
        return self.contract.functions.breedWithAuto(_matronId, _sireId)

    def get_event_Pregnant(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return self.contract.events.Pregnant().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )

    def get_event_Transfer(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return self.contract.events.Transfer().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )

    def get_event_Approval(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return self.contract.events.Approval().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )

    def get_event_Birth(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return self.contract.events.Birth().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )

    def get_event_ContractUpgrade(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return self.contract.events.ContractUpgrade().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
