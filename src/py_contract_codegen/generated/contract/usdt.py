# Autogenerated file.
from typing import Any, Iterable
from hexbytes import HexBytes
from web3 import Web3
from web3.contract.contract import ContractFunction
from web3.types import ENS, Address, BlockIdentifier, ChecksumAddress, EventData

ABI = [
    {
        "constant": True,
        "inputs": [],
        "name": "name",
        "outputs": [{"name": "", "type": "string"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": False,
        "inputs": [{"name": "_upgradedAddress", "type": "address"}],
        "name": "deprecate",
        "outputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function",
    },
    {
        "constant": False,
        "inputs": [
            {"name": "_spender", "type": "address"},
            {"name": "_value", "type": "uint256"},
        ],
        "name": "approve",
        "outputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [],
        "name": "deprecated",
        "outputs": [{"name": "", "type": "bool"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": False,
        "inputs": [{"name": "_evilUser", "type": "address"}],
        "name": "addBlackList",
        "outputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [],
        "name": "totalSupply",
        "outputs": [{"name": "", "type": "uint256"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": False,
        "inputs": [
            {"name": "_from", "type": "address"},
            {"name": "_to", "type": "address"},
            {"name": "_value", "type": "uint256"},
        ],
        "name": "transferFrom",
        "outputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [],
        "name": "upgradedAddress",
        "outputs": [{"name": "", "type": "address"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [{"name": "", "type": "address"}],
        "name": "balances",
        "outputs": [{"name": "", "type": "uint256"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [],
        "name": "decimals",
        "outputs": [{"name": "", "type": "uint256"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [],
        "name": "maximumFee",
        "outputs": [{"name": "", "type": "uint256"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [],
        "name": "_totalSupply",
        "outputs": [{"name": "", "type": "uint256"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": False,
        "inputs": [],
        "name": "unpause",
        "outputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [{"name": "_maker", "type": "address"}],
        "name": "getBlackListStatus",
        "outputs": [{"name": "", "type": "bool"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [{"name": "", "type": "address"}, {"name": "", "type": "address"}],
        "name": "allowed",
        "outputs": [{"name": "", "type": "uint256"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [],
        "name": "paused",
        "outputs": [{"name": "", "type": "bool"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [{"name": "who", "type": "address"}],
        "name": "balanceOf",
        "outputs": [{"name": "", "type": "uint256"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": False,
        "inputs": [],
        "name": "pause",
        "outputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [],
        "name": "getOwner",
        "outputs": [{"name": "", "type": "address"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [],
        "name": "owner",
        "outputs": [{"name": "", "type": "address"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [],
        "name": "symbol",
        "outputs": [{"name": "", "type": "string"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": False,
        "inputs": [
            {"name": "_to", "type": "address"},
            {"name": "_value", "type": "uint256"},
        ],
        "name": "transfer",
        "outputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function",
    },
    {
        "constant": False,
        "inputs": [
            {"name": "newBasisPoints", "type": "uint256"},
            {"name": "newMaxFee", "type": "uint256"},
        ],
        "name": "setParams",
        "outputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function",
    },
    {
        "constant": False,
        "inputs": [{"name": "amount", "type": "uint256"}],
        "name": "issue",
        "outputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function",
    },
    {
        "constant": False,
        "inputs": [{"name": "amount", "type": "uint256"}],
        "name": "redeem",
        "outputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [
            {"name": "_owner", "type": "address"},
            {"name": "_spender", "type": "address"},
        ],
        "name": "allowance",
        "outputs": [{"name": "remaining", "type": "uint256"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [],
        "name": "basisPointsRate",
        "outputs": [{"name": "", "type": "uint256"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [{"name": "", "type": "address"}],
        "name": "isBlackListed",
        "outputs": [{"name": "", "type": "bool"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": False,
        "inputs": [{"name": "_clearedUser", "type": "address"}],
        "name": "removeBlackList",
        "outputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function",
    },
    {
        "constant": True,
        "inputs": [],
        "name": "MAX_UINT",
        "outputs": [{"name": "", "type": "uint256"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function",
    },
    {
        "constant": False,
        "inputs": [{"name": "newOwner", "type": "address"}],
        "name": "transferOwnership",
        "outputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function",
    },
    {
        "constant": False,
        "inputs": [{"name": "_blackListedUser", "type": "address"}],
        "name": "destroyBlackFunds",
        "outputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function",
    },
    {
        "inputs": [
            {"name": "_initialSupply", "type": "uint256"},
            {"name": "_name", "type": "string"},
            {"name": "_symbol", "type": "string"},
            {"name": "_decimals", "type": "uint256"},
        ],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "constructor",
    },
    {
        "anonymous": False,
        "inputs": [{"indexed": False, "name": "amount", "type": "uint256"}],
        "name": "Issue",
        "type": "event",
    },
    {
        "anonymous": False,
        "inputs": [{"indexed": False, "name": "amount", "type": "uint256"}],
        "name": "Redeem",
        "type": "event",
    },
    {
        "anonymous": False,
        "inputs": [{"indexed": False, "name": "newAddress", "type": "address"}],
        "name": "Deprecate",
        "type": "event",
    },
    {
        "anonymous": False,
        "inputs": [
            {"indexed": False, "name": "feeBasisPoints", "type": "uint256"},
            {"indexed": False, "name": "maxFee", "type": "uint256"},
        ],
        "name": "Params",
        "type": "event",
    },
    {
        "anonymous": False,
        "inputs": [
            {"indexed": False, "name": "_blackListedUser", "type": "address"},
            {"indexed": False, "name": "_balance", "type": "uint256"},
        ],
        "name": "DestroyedBlackFunds",
        "type": "event",
    },
    {
        "anonymous": False,
        "inputs": [{"indexed": False, "name": "_user", "type": "address"}],
        "name": "AddedBlackList",
        "type": "event",
    },
    {
        "anonymous": False,
        "inputs": [{"indexed": False, "name": "_user", "type": "address"}],
        "name": "RemovedBlackList",
        "type": "event",
    },
    {
        "anonymous": False,
        "inputs": [
            {"indexed": True, "name": "owner", "type": "address"},
            {"indexed": True, "name": "spender", "type": "address"},
            {"indexed": False, "name": "value", "type": "uint256"},
        ],
        "name": "Approval",
        "type": "event",
    },
    {
        "anonymous": False,
        "inputs": [
            {"indexed": True, "name": "from", "type": "address"},
            {"indexed": True, "name": "to", "type": "address"},
            {"indexed": False, "name": "value", "type": "uint256"},
        ],
        "name": "Transfer",
        "type": "event",
    },
    {"anonymous": False, "inputs": [], "name": "Pause", "type": "event"},
    {"anonymous": False, "inputs": [], "name": "Unpause", "type": "event"},
]


class USDTContract:
    def __init__(
        self, contract_address: Address | ChecksumAddress | ENS, web3: Web3
    ) -> None:
        self.contract_address = contract_address
        self.web3 = web3
        self.contract = web3.eth.contract(address=self.contract_address, abi=ABI)

    def name(self) -> str:
        return self.contract.functions.name().call()

    def deprecate(self, _upgradedAddress: ChecksumAddress) -> ContractFunction:
        return self.contract.functions.deprecate(_upgradedAddress)

    def approve(self, _spender: ChecksumAddress, _value: int) -> ContractFunction:
        return self.contract.functions.approve(_spender, _value)

    def deprecated(self) -> bool:
        return self.contract.functions.deprecated().call()

    def addBlackList(self, _evilUser: ChecksumAddress) -> ContractFunction:
        return self.contract.functions.addBlackList(_evilUser)

    def totalSupply(self) -> int:
        return self.contract.functions.totalSupply().call()

    def transferFrom(
        self, _from: ChecksumAddress, _to: ChecksumAddress, _value: int
    ) -> ContractFunction:
        return self.contract.functions.transferFrom(_from, _to, _value)

    def upgradedAddress(self) -> str:
        return self.contract.functions.upgradedAddress().call()

    def balances(self, input_1: ChecksumAddress) -> int:
        return self.contract.functions.balances(input_1).call()

    def decimals(self) -> int:
        return self.contract.functions.decimals().call()

    def maximumFee(self) -> int:
        return self.contract.functions.maximumFee().call()

    def _totalSupply(self) -> int:
        return self.contract.functions._totalSupply().call()

    def unpause(self) -> ContractFunction:
        return self.contract.functions.unpause()

    def getBlackListStatus(self, _maker: ChecksumAddress) -> bool:
        return self.contract.functions.getBlackListStatus(_maker).call()

    def allowed(self, input_1: ChecksumAddress, input_2: ChecksumAddress) -> int:
        return self.contract.functions.allowed(input_1, input_2).call()

    def paused(self) -> bool:
        return self.contract.functions.paused().call()

    def balanceOf(self, who: ChecksumAddress) -> int:
        return self.contract.functions.balanceOf(who).call()

    def pause(self) -> ContractFunction:
        return self.contract.functions.pause()

    def getOwner(self) -> str:
        return self.contract.functions.getOwner().call()

    def owner(self) -> str:
        return self.contract.functions.owner().call()

    def symbol(self) -> str:
        return self.contract.functions.symbol().call()

    def transfer(self, _to: ChecksumAddress, _value: int) -> ContractFunction:
        return self.contract.functions.transfer(_to, _value)

    def setParams(self, newBasisPoints: int, newMaxFee: int) -> ContractFunction:
        return self.contract.functions.setParams(newBasisPoints, newMaxFee)

    def issue(self, amount: int) -> ContractFunction:
        return self.contract.functions.issue(amount)

    def redeem(self, amount: int) -> ContractFunction:
        return self.contract.functions.redeem(amount)

    def allowance(self, _owner: ChecksumAddress, _spender: ChecksumAddress) -> int:
        return self.contract.functions.allowance(_owner, _spender).call()

    def basisPointsRate(self) -> int:
        return self.contract.functions.basisPointsRate().call()

    def isBlackListed(self, input_1: ChecksumAddress) -> bool:
        return self.contract.functions.isBlackListed(input_1).call()

    def removeBlackList(self, _clearedUser: ChecksumAddress) -> ContractFunction:
        return self.contract.functions.removeBlackList(_clearedUser)

    def MAX_UINT(self) -> int:
        return self.contract.functions.MAX_UINT().call()

    def transferOwnership(self, newOwner: ChecksumAddress) -> ContractFunction:
        return self.contract.functions.transferOwnership(newOwner)

    def destroyBlackFunds(self, _blackListedUser: ChecksumAddress) -> ContractFunction:
        return self.contract.functions.destroyBlackFunds(_blackListedUser)

    def get_event_Issue(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return self.contract.events.Issue().get_logs(  # type: ignore[attr-defined]
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )

    def get_event_Redeem(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return self.contract.events.Redeem().get_logs(  # type: ignore[attr-defined]
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )

    def get_event_Deprecate(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return self.contract.events.Deprecate().get_logs(  # type: ignore[attr-defined]
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )

    def get_event_Params(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return self.contract.events.Params().get_logs(  # type: ignore[attr-defined]
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )

    def get_event_DestroyedBlackFunds(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return self.contract.events.DestroyedBlackFunds().get_logs(  # type: ignore[attr-defined]
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )

    def get_event_AddedBlackList(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return self.contract.events.AddedBlackList().get_logs(  # type: ignore[attr-defined]
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )

    def get_event_RemovedBlackList(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return self.contract.events.RemovedBlackList().get_logs(  # type: ignore[attr-defined]
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )

    def get_event_Approval(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return self.contract.events.Approval().get_logs(  # type: ignore[attr-defined]
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )

    def get_event_Transfer(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return self.contract.events.Transfer().get_logs(  # type: ignore[attr-defined]
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )

    def get_event_Pause(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return self.contract.events.Pause().get_logs(  # type: ignore[attr-defined]
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )

    def get_event_Unpause(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return self.contract.events.Unpause().get_logs(  # type: ignore[attr-defined]
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
