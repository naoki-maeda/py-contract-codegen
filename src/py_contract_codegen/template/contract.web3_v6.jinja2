# Autogenerated file.
from typing import Any, Iterable
from hexbytes import HexBytes
from web3 import Web3
from web3.contract.contract import ContractFunction
from web3.types import ENS, Address, BlockIdentifier, ChecksumAddress, EventData

ABI = {{ formatted_content | safe }}


class {{ contract_class_name }}:
    def __init__(self, contract_address: Address | ChecksumAddress | ENS, web3: Web3) -> None:
        self.contract_address = contract_address
        self.web3 = web3
        self.contract = web3.eth.contract(address=self.contract_address, abi=ABI)
{% for function in functions %}
    def {{ function.name }}(self{% if function.converted_inputs %}, {% endif %}{% for input in function.converted_inputs %}{{ input.name }}: {{ input.python_type }}{% if not loop.last %}, {% endif %}{% endfor %}{% if function.stateMutability not in ['view', 'pure'] %}{% endif %}){% if function.stateMutability in ['view', 'pure'] %} -> {% if function.converted_outputs|length == 1 %}{{ function.converted_outputs[0].python_type }}{% else %}tuple[{% for output in function.converted_outputs %}{{ output.python_type }}{% if not loop.last %}, {% endif %}{% endfor %}]{% endif %}{% else %} -> ContractFunction{% endif %}:{% if function.stateMutability in ['view', 'pure'] %}
        return self.contract.functions.{{ function.name }}({% for input in function.converted_inputs %}{{ input.name }}{% if not loop.last %}, {% endif %}{% endfor %}).call(){% else %}
        return self.contract.functions.{{ function.name }}({% for input in function.converted_inputs %}{{ input.name }}{% if not loop.last %}, {% endif %}{% endfor %}){% endif %}
{% endfor %}{% for event in events %}
    def get_event_{{ event.name }}(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return self.contract.events.{{ event.name }}().get_logs(
            argument_filters=argument_filters,
            fromBlock=from_block,
            toBlock=to_block,
            block_hash=block_hash,
        )
{% endfor %}
